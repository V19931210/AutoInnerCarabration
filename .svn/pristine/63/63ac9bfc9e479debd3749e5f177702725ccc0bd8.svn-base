using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Net.Sockets;
using System.Net;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Threading;

namespace weldDeviceProduct
{
    public partial class Form2 : Form
    {
        private ModelWeldTrack BCW500 = new ModelWeldTrack()
        {
            Dx = 18.55,
            Dy = 23.55,
            Wx = 150,
            Wy = 46,
            Wz = 112,
            Cam2LaserDis = 115.55
        };
        private ModelWeldTrack BCW500S = new ModelWeldTrack()
        {
            Dx = 18.55,
            Dy = 23.55,
            Wx = 150,
            Wy = 46,
            Wz = 112,
            Cam2LaserDis = 115.55

        };
        public Form2()
        {
            InitializeComponent();
            Control.CheckForIllegalCrossThreadCalls = false;
        }

        private void cbbDeviceType_SelectedIndexChanged(object sender, EventArgs e)
        {
            Thread t = new Thread(fillPara);
            t.IsBackground = true;
            t.Start();
        }

        private void fillPara()
        {
            switch (cbbDeviceType.SelectedIndex)
            {
                case 0:
                    {
                        textDeviceType.Text = "BCW500";
                        lineLowerDist.Value = Convert.ToDecimal(BCW500.Dx);
                        lineRightDist.Value = Convert.ToDecimal(BCW500.Dy);
                        lineUpperLowerDiff.Value = Convert.ToDecimal(BCW500.Wx);
                        lineLeftRightDiff.Value = Convert.ToDecimal(BCW500.Wy);
                        lineFrontRearDiff.Value = Convert.ToDecimal(BCW500.Wz);
                        lineRightToLaserDist.Value = Convert.ToDecimal(BCW500.Cam2LaserDis);
                        break;
                    }

                case 1:
                    {
                        textDeviceType.Text = "BCW500S";
                        lineLowerDist.Value = Convert.ToDecimal(BCW500S.Dx);
                        lineRightDist.Value = Convert.ToDecimal(BCW500S.Dy);
                        lineUpperLowerDiff.Value = Convert.ToDecimal(BCW500S.Wx);
                        lineLeftRightDiff.Value = Convert.ToDecimal(BCW500S.Wy);
                        lineFrontRearDiff.Value = Convert.ToDecimal(BCW500S.Wz);
                        lineRightToLaserDist.Value = Convert.ToDecimal(BCW500S.Cam2LaserDis);
                        break;
                    }

                default:
                    break;
            }

        }

        private void btnWriteToDevice_Click(object sender, EventArgs e)
        {
            Thread t = new Thread(writeToDevice);
            t.IsBackground = true;
            t.Start();
        }

        private void writeToDevice()
        {
            //验证参数合法性
            if (!isParaAllRight())
            {
                return;
            }

            MessageBoxButtons msgButton = MessageBoxButtons.OKCancel;
            DialogResult res = MessageBox.Show("确定要将参数写入寻缝器吗?", "Attention！", msgButton);
            if (res == DialogResult.OK)
            {
                ModelWeldTrack req = new ModelWeldTrack(WeldTrackCMD.WriteParaToVision, Form1.id)
                {
                    DeviceType = textDeviceType.Text,
                    SN = textDeviceSN.Text,
                    MinZ = Convert.ToDouble(lineNearestViewDist.Text),
                    MidZ = Convert.ToDouble(lineOptViewDist.Text),
                    MaxZ = Convert.ToDouble(lineLongestViewDist.Text),
                    MinView = Convert.ToDouble(lineNearestView.Text),
                    MidView = Convert.ToDouble(lineOptView.Text),
                    MaxView = Convert.ToDouble(lineLongestView.Text),
                    Dx = Convert.ToDouble(lineLowerDist.Text),
                    Dy = Convert.ToDouble(lineRightDist.Text),
                    Dz = Convert.ToDouble(lineFrontDist.Text),
                    Wx = Convert.ToDouble(lineUpperLowerDiff.Text),
                    Wy = Convert.ToDouble(lineLeftRightDiff.Text),
                    Wz = Convert.ToDouble(lineFrontRearDiff.Text),
                    Cam2LaserDis = Convert.ToDouble(lineRightToLaserDist.Text)
                };
                ModelWeldTrack resp = new ModelWeldTrack();
                try
                {
                    if (!Form1.sendCmdToSensor(req, ref resp))
                    {
                        MessageBox.Show(System.DateTime.Now + "：未接收到寻缝器返回数据！\r\n");
                        return;
                    }
                    if (resp.Result != "true")
                    {
                        MessageBox.Show(System.DateTime.Now + "参数写入寻缝器失败！\r\n");
                    }
                    else
                    {
                        MessageBox.Show(System.DateTime.Now + "：参数写入寻缝器成功\r\n");
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
        }

        private bool isParaAllRight()
        {
            if (String.IsNullOrEmpty(textDeviceType.Text))
            {
                MessageBox.Show("未输入设备型号！\r\n");
                return false;
            }
            if (String.IsNullOrEmpty(textDeviceSN.Text))
            {
                MessageBox.Show("未输入设备序列号！\r\n");
                return false;
            }
            if (lineLowerDist.Value.Equals(0) || lineRightDist.Value.Equals(0) ||
                 lineFrontDist.Value.Equals(0) || lineUpperLowerDiff.Value.Equals(0) ||
                 lineLeftRightDiff.Value.Equals(0) || lineFrontRearDiff.Value.Equals(0) ||
                 lineRightToLaserDist.Value.Equals(0))
            {
                MessageBox.Show("寻缝器机械参数必须大于0！\r\n");
                return false;
            }
            if (lineOptViewDist.Value.Equals(0) || lineNearestViewDist.Value.Equals(0) ||
                lineLongestViewDist.Value.Equals(0) || lineOptView.Value.Equals(0) ||
                lineNearestView.Value.Equals(0) || lineLongestView.Value.Equals(0))
            {
                MessageBox.Show("寻缝器视野视距必须大于0！\r\n");
                return false;
            }
            return true;
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        public void UpdateDevicePara(ModelWeldTrack para)
        {
            lineNearestViewDist.Value = Convert.ToDecimal(para.MinZ);
            lineOptViewDist.Value = Convert.ToDecimal(para.MidZ);
            lineLongestViewDist.Value = Convert.ToDecimal(para.MaxZ);
            lineNearestView.Value = Convert.ToDecimal(para.MinView);
            lineOptView.Value = Convert.ToDecimal(para.MidView);
            lineLongestView.Value = Convert.ToDecimal(para.MaxView);

            double? n = (para.MaxView * para.MinZ - para.MinView * para.MaxZ) / (2 * (para.MaxZ - para.MinZ));
            para.Dz = -n / (para.MinView / 2 + n) * para.MinZ;

            lineFrontDist.Value = Convert.ToDecimal(para.Dz);
        }

    }
}
