using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using System.Net.Sockets;
using System.Net;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace weldDeviceProduct
{
    public partial class Form2 : Form
    {
        public Form2()
        {
            InitializeComponent();
        }

        private void btnWriteToDevice_Click(object sender, EventArgs e)
        {
            MessageBoxButtons msgButton = MessageBoxButtons.OKCancel;

            DialogResult res = MessageBox.Show("确定要将参数写入寻缝器吗?", "Attention！", msgButton);
            if (res == DialogResult.OK)
            {
                //验证参数合法性
                if (String.IsNullOrEmpty(textDeviceType.Text))
                {
                    MessageBox.Show("未输入设备型号！\r\n");
                    return;
                }
                if (String.IsNullOrEmpty(textDeviceSN.Text))
                {
                    MessageBox.Show("未输入设备序列号！\r\n");
                    return;
                }
                if (lineLowerDist.Value.Equals(0) || lineRightDist.Value.Equals(0) ||
                     lineFrontDist.Value.Equals(0) || lineUpperLowerDiff.Value.Equals(0) ||
                     lineLeftRightDiff.Value.Equals(0) || lineFrontRearDiff.Value.Equals(0) ||
                     lineRightToLaserDist.Value.Equals(0))
                {
                    MessageBox.Show("寻缝器机械参数必须大于0！\r\n");
                    return;
                }
                if (lineOptViewDist.Value.Equals(0) || lineNearestViewDist.Value.Equals(0) ||
                    lineLongestViewDist.Value.Equals(0) || lineOptView.Value.Equals(0) ||
                    lineNearestView.Value.Equals(0) || lineLongestView.Value.Equals(0))
                {
                    MessageBox.Show("寻缝器视野视距必须大于0！\r\n");
                    return;
                }

                ModelWeldTrackCMD para = new ModelWeldTrackCMD(13, 123);
                para.DeviceType = textDeviceType.Text;
                para.SN = textDeviceSN.Text;
                para.MinZ = Convert.ToDouble(lineNearestViewDist.Text);
                para.MidZ = Convert.ToDouble(lineOptViewDist.Text);
                para.MaxZ = Convert.ToDouble(lineLongestViewDist.Text);
                para.MinView = Convert.ToDouble(lineNearestView.Text);
                para.MidView = Convert.ToDouble(lineOptView.Text);
                para.MaxView = Convert.ToDouble(lineLongestView.Text);
                para.Dx = Convert.ToDouble(lineLowerDist.Text);
                para.Dy = Convert.ToDouble(lineRightDist.Text);
                para.Dz = Convert.ToDouble(lineFrontDist.Text);
                para.Wx = Convert.ToDouble(lineUpperLowerDiff.Text);
                para.Wy = Convert.ToDouble(lineLeftRightDiff.Text);
                para.Wz = Convert.ToDouble(lineFrontRearDiff.Text);
                para.Cam2LaserDis = Convert.ToDouble(lineRightToLaserDist.Text);

                Socket sensorSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                sensorSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 10000);

                try
                {
                    sensorSocket.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 5020));
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }

                try
                {
                    string data = JsonConvert.SerializeObject(para) + "#Vision";
                    byte[] sensor_send_buf = Encoding.UTF8.GetBytes(data);
                    sensorSocket.Send(sensor_send_buf);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }

                try
                {
                    byte[] sensor_recv_buf = new byte[1024];
                    int len = sensorSocket.Receive(sensor_recv_buf);

                    if (len > 0)
                    {
                        string msg = Encoding.UTF8.GetString(sensor_recv_buf);
                        string[] jsonStrings = msg.Split('#');
                        JObject jObj = JObject.Parse(jsonStrings[0]);
                        if (jObj["Result"].ToString() == "True")
                        {

                            MessageBox.Show("写入参数成功！");
                        }
                        else
                        {
                            MessageBox.Show("写入参数失败！");
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }

            }
        }

        private void btnCancel_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        delegate void dgUpdateDevicePara(ModelDeviceViewDist para);

        public void UpdateDevicePara(ModelDeviceViewDist para)
        {
            if (this.InvokeRequired)
            {
                dgUpdateDevicePara dg = new dgUpdateDevicePara(UpdateDevicePara);
                this.Invoke(dg);
            }
            else
            {
                lineNearestViewDist.Value = Convert.ToDecimal(para.MinZ);
                lineOptViewDist.Value = Convert.ToDecimal(para.MidZ);
                lineLongestViewDist.Value = Convert.ToDecimal(para.MaxZ);
                lineNearestView.Value = Convert.ToDecimal(para.MinView);
                lineOptView.Value = Convert.ToDecimal(para.MidView);
                lineLongestView.Value = Convert.ToDecimal(para.MaxView);
            }
        }
    }
}
