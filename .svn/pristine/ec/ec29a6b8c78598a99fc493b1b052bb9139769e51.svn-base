using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.Net.Sockets;
using System.Threading;
using System.Net;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.IO;

namespace weldDeviceProduct
{
    public partial class Form1 : Form
    {

        private static readonly Mutex mutex = new Mutex();//多线程情况下保证线程安全

        private Form2 frm2;//参数编辑界面

        private Process proWeldTrack;
        private IntPtr weldFormHandle = new IntPtr(0);
        private Process proBCS100;

        Socket sensorSocket;
        Socket heightSocket;

        private int id = 110;
        JsonSerializerSettings jsonSetting = new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore };

        private double optViewDist;//记录最佳视距
        private double actualDist;//记录角点实际宽度
        private double[][] cornerPoints;//记录采集的标定数据
        private bool isCaliing = false;//标记是否处于自动标定过程中
        private bool isGettingHeight = false;//标记是否处于获取调高器高度过程中

        [DllImport("USER32.DLL")]
        public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

        [DllImport("user32.dll ", EntryPoint = "SetParent")]
        private static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);   //将外部窗体嵌入程序

        [DllImport("user32.dll", EntryPoint = "ShowWindow", CharSet = CharSet.Auto)]
        private static extern int ShowWindow(IntPtr hwnd, int nCmdShow);                  //设置窗体属性

        [DllImport("user32.dll", EntryPoint = "SetWindowLong", CharSet = CharSet.Auto)]
        public static extern IntPtr SetWindowLong(IntPtr hWnd, int nIndex, long dwNewLong);

        [DllImport("user32.dll", EntryPoint = "GetWindowLong", CharSet = CharSet.Auto)]
        public static extern long GetWindowLong(IntPtr hWnd, int nIndex);

        [DllImport("user32.dll")]

        private static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);

        /// <summary>
        /// 去除窗体边框
        /// </summary>
        /// <param name="vHandle">窗口句柄</param>
        public static void RemoveWindowBorder(IntPtr vHandle)
        {
            const int GWL_STYLE = (-16);
            const int WS_CAPTION = 0xC00000;
            const int WS_BORDER = 0x800000;
            const int WS_THICKFRAME = 0x00040000;
            const int WS_CHILDWINDOW = 0x40000000;

            long LStyle = GetWindowLong(vHandle, GWL_STYLE);

            LStyle = (LStyle & (~WS_CAPTION) & (~WS_BORDER) & (~WS_THICKFRAME)) | WS_CHILDWINDOW;
            SetWindowLong(vHandle, GWL_STYLE, LStyle);
        }


        /// <summary>
        /// 调整第三方应用窗体大小
        /// </summary>
        public void ResizeWindow()
        {
            ShowWindow(weldFormHandle, 0);  //先将窗口隐藏
            ShowWindow(weldFormHandle, 3);  //再将窗口最大化，可以让第三方窗口自适应容器的大小
        }

        void timerUpdateFrm_Tick(object sender, EventArgs e)
        {
            //第三方窗体句柄不为空
            if (weldFormHandle != IntPtr.Zero)
            {
                System.Threading.Thread t = new System.Threading.Thread(ResizeWindow);
                t.Start();  //开线程刷新第三方窗体大小
                System.Threading.Thread.Sleep(50); //略加延时
                timerUpdateFrm.Stop();  //停止定时器
            }
        }

        public Form1()
        {
            InitializeComponent();

            timerUpdateFrm.Tick += new EventHandler(timerUpdateFrm_Tick);  //绑定事件
            timerUpdateFrm.Interval = 200;

            frm2 = new Form2();

            sensorSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            sensorSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 2000);

            heightSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            heightSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 5000);

            cornerPoints = new double[10][];
            for (int i = 0; i < cornerPoints.Length; i++)
            {
                cornerPoints[i] = new double[5];
            }

            cbbLaserHoldSpacePercent.SelectedIndex = 0;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            //打开BCVWeldTrack.exe
            Process[] proWeldTrackArr = Process.GetProcessesByName("BCVWeldTrack");
            if (proWeldTrackArr.Length > 0)
            {
                proWeldTrack = proWeldTrackArr[0];
            }
            else
            {
                try
                {
                    proWeldTrack = new Process();
                    proWeldTrack.StartInfo.FileName = "C:\\Program Files (x86)\\Friendess\\BCVWeldTrack\\BCVWeldTrack.exe";
                    proWeldTrack.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                    proWeldTrack.Start();
                }
                catch (Exception ex)
                {
                    LogAddStr(System.DateTime.Now + "：启动寻缝器软件失败！\r\n");
                    MessageBox.Show(ex.Message);
                }
            }

            //查找BCVWeldTrack.exe主窗口窗口句柄
            for (int i = 0; i < 30; i++)
            {
                weldFormHandle = FindWindow(null, "BCVWeldTrackMainForm");
                if (weldFormHandle != IntPtr.Zero)
                {
                    //MessageBox.Show("Find BCVWeldTrackMainForm!");
                    break;
                }
                else
                {
                    System.Threading.Thread.Sleep(100);
                }
            }

            if (weldFormHandle == IntPtr.Zero)
            {
                MessageBox.Show("not Find BCVWeldTrackMainForm!");
            }

            RemoveWindowBorder(weldFormHandle);  //移除边框
            SetParent(weldFormHandle, pnlMainFrom.Handle); //嵌入父容器
            ShowWindowAsync(weldFormHandle, 3);   //显示

            //打开BCS100APP.exe
            Process[] proBCS100Arr = Process.GetProcessesByName("BCS100APP");
            if (proBCS100Arr.Length > 0)
            {
                proBCS100 = proBCS100Arr[0];
            }
            else
            {
                try
                {
                    proBCS100 = new Process();
                    proBCS100.StartInfo.FileName = "C:\\Program Files (x86)\\Friendess\\BCVWeldTrack\\BCS100APP.exe";
                    proBCS100.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Normal;
                    proBCS100.Start();
                }
                catch (Exception ex)
                {
                    LogAddStr(System.DateTime.Now + "：启动调高器测试软件失败！\r\n");
                    MessageBox.Show(ex.Message);
                }
            }

            //连接寻缝器软件
            try
            {
                sensorSocket.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 5020));
            }
            catch (Exception ex)
            {
                LogAddStr(System.DateTime.Now + "：连接寻缝器失败！\r\n");
                MessageBox.Show(ex.Message);
            }

            //打开激光
            openCloseLaser();

            //连接调高器软件
            try
            {
                heightSocket.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 60001));
            }
            catch (Exception ex)
            {
                LogAddStr(System.DateTime.Now + "：连接调高器测试软件失败！\r\n");
                MessageBox.Show(ex.Message);
            }
        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            Thread.Sleep(100);

            //关闭激光
            openCloseLaser();
            //sensorSocket.Close();
            heightSocket.Close();

            Process[] proWeldTrackArr = Process.GetProcessesByName("BCVWeldTrack");
            if (proWeldTrackArr.Length > 0)
            {
                proWeldTrack.Kill();
            }

            Process[] proBCS100Arr = Process.GetProcessesByName("BCS100APP");
            if (proBCS100Arr.Length > 0)
            {
                proBCS100.Kill();
            }
        }

        private void pnlMainFrom_SizeChanged(object sender, EventArgs e)
        {
            timerUpdateFrm.Start();
        }

        private bool sendCmdToSensor(ModelWeldTrackCMD req, ref ModelWeldTrackCMD resp)
        {
            string sensor_input = JsonConvert.SerializeObject(req, jsonSetting);
            byte[] sensor_send_buf = Encoding.UTF8.GetBytes(sensor_input + "#Vision");
            sensorSocket.Send(sensor_send_buf);

            byte[] sensor_recv_buf = new byte[1024];
            int len = sensorSocket.Receive(sensor_recv_buf);

            if (len > 0)
            {
                string msg = Encoding.UTF8.GetString(sensor_recv_buf);
                string[] jsonStrings = msg.Split('#');
                resp = JsonConvert.DeserializeObject<ModelWeldTrackCMD>(jsonStrings[0]);
                return true;
            }

            return false;
        }

        private void btnOpenCloseLaser_Click(object sender, EventArgs e)
        {
            Thread t = new Thread(openCloseLaser);
            t.IsBackground = true;
            t.Start();
        }

        private void openCloseLaser()
        {
            ModelWeldTrackCMD req = new ModelWeldTrackCMD(9, 123);
            ModelWeldTrackCMD resp = new ModelWeldTrackCMD();
            bool flag = false;
            try
            {
                flag = sendCmdToSensor(req, ref resp);
            }
            catch (SocketException ex)
            {
                if (ex.SocketErrorCode == SocketError.TimedOut)
                {

                }
                else
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                return;
            }

            if (resp.Result != "true")
            {
                MessageBox.Show("发送打开/关闭激光指令失败！");
            }
            //sensorSocket.Close();
        }

        private void ctlOpenCloseLaser(Socket sensorSocket, ModelWeldTrackCMD req, ref ModelWeldTrackCMD resp)
        {
            try
            {
                string sensor_input = JsonConvert.SerializeObject(req, jsonSetting);
                byte[] sensor_send_buf = Encoding.UTF8.GetBytes(sensor_input + "#Vision");
                sensorSocket.Send(sensor_send_buf);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            try
            {
                byte[] sensor_recv_buf = new byte[1024];
                int len = sensorSocket.Receive(sensor_recv_buf);

                if (len > 0)
                {
                    string msg = Encoding.UTF8.GetString(sensor_recv_buf);
                    string[] jsonStrings = msg.Split('#');
                    resp = JsonConvert.DeserializeObject<ModelWeldTrackCMD>(jsonStrings[0]);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void cbbLaserHoldSpacePercent_SelectedIndexChanged(object sender, EventArgs e)
        {
            Thread t = new Thread(setLaserHoldSpacePercent);
            t.IsBackground = true;
            t.Start();
        }

        private void setLaserHoldSpacePercent()
        {

        }

        private void btnReadOptViewDist_Click(object sender, EventArgs e)
        {
            Thread t = new Thread(readOptViewDist);
            t.IsBackground = true;
            t.Start();
        }

        private void btnReadStartPoint_Click(object sender, EventArgs e)
        {
            Thread t = new Thread(readStartPoint);
            t.IsBackground = true;
            t.Start();
        }

        private void btnReadEndPoint_Click(object sender, EventArgs e)
        {
            Thread t = new Thread(readEndPoint);
            t.IsBackground = true;
            t.Start();
        }

        private void readOptViewDist()
        {
            mutex.WaitOne();
            if (isGettingHeight)
            {
                mutex.ReleaseMutex();
                MessageBox.Show("获取调高器高度正在进行，请勿重复点击！");
                return;
            }
            isGettingHeight = true;
            mutex.ReleaseMutex();

            Socket heightSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            heightSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 5000);

            try
            {
                heightSocket.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 60001));
            }
            catch (Exception ex)
            {
                LogAddStr(System.DateTime.Now + "：连接调高器测试软件失败！\r\n");
                MessageBox.Show(ex.Message);
                isGettingHeight = false;
                return;
            }

            ModelHeightAdjust resp = new ModelHeightAdjust();
            if (!getHeight(heightSocket, ref resp))
            {
                LogAddStr(System.DateTime.Now + "：获取调高器当前高度失败！\r\n");
            }
            else
            {
                if (resp.CMDID == HeightAdjustState.HeightFailedConnect)
                {
                    LogAddStr(System.DateTime.Now + "：连接调高器失败！\r\n");
                }
                else
                {
                    double H = (double)lineTGQTotalTravel.Value;
                    double h = (double)lineTGQMesaDist.Value;
                    OptViewDistAddStr((H + h - resp.Zpos).ToString());
                }
            }

            mutex.WaitOne();
            isGettingHeight = false;
            mutex.ReleaseMutex();

            heightSocket.Close();
        }

        private void readStartPoint()
        {
            mutex.WaitOne();
            if (isGettingHeight)
            {
                mutex.ReleaseMutex();
                MessageBox.Show("获取调高器高度正在进行，请勿重复点击！");
                return;
            }
            isGettingHeight = true;
            mutex.ReleaseMutex();

            Socket heightSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            heightSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 5000);

            try
            {
                heightSocket.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 60001));
            }
            catch (Exception ex)
            {
                LogAddStr(System.DateTime.Now + "：连接调高器测试软件失败！\r\n");
                MessageBox.Show(ex.Message);
                isGettingHeight = false;
                return;
            }

            ModelHeightAdjust resp = new ModelHeightAdjust();
            if (!getHeight(heightSocket, ref resp))
            {
                LogAddStr(System.DateTime.Now + "：获取调高器当前高度失败！\r\n");
            }
            else
            {
                if (resp.CMDID == HeightAdjustState.HeightFailedConnect)
                {
                    LogAddStr(System.DateTime.Now + "：连接调高器失败！\r\n");
                }
                else
                {
                    startPosAddStr(resp.Zpos.ToString());
                    btnReadStartPointDisable();
                    btnReadEndPointEnable();
                }
            }

            mutex.WaitOne();
            isGettingHeight = false;
            mutex.ReleaseMutex();

            heightSocket.Close();
        }

        private void readEndPoint()
        {
            mutex.WaitOne();
            if (isGettingHeight)
            {
                mutex.ReleaseMutex();
                MessageBox.Show("获取调高器高度正在进行，请勿重复点击！");
                return;
            }
            isGettingHeight = true;
            mutex.ReleaseMutex();

            Socket heightSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            heightSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 5000);

            try
            {
                heightSocket.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 60001));
            }
            catch (Exception ex)
            {
                LogAddStr(System.DateTime.Now + "：连接调高器测试软件失败！\r\n");
                MessageBox.Show(ex.Message);
                isGettingHeight = false;
                return;
            }

            ModelHeightAdjust resp = new ModelHeightAdjust();
            if (!getHeight(heightSocket, ref resp))
            {
                LogAddStr(System.DateTime.Now + "：获取调高器当前高度失败！\r\n");
            }
            else
            {
                if (resp.CMDID == HeightAdjustState.HeightFailedConnect)
                {
                    LogAddStr(System.DateTime.Now + "：连接调高器失败！\r\n");
                }
                else
                {
                    endPosAddStr(resp.Zpos.ToString());
                    btnReadStartPointEnable();
                    btnReadEndPointDisable();
                }
            }

            mutex.WaitOne();
            isGettingHeight = false;
            mutex.ReleaseMutex();

            heightSocket.Close();
        }

        private void btnAutoInterParaCali1_Click(object sender, EventArgs e)
        {
            Thread step1 = new Thread(autoInterParaCali1);
            step1.IsBackground = true;
            step1.Start();
        }

        private void btnAutoInterParaCali2_Click(object sender, EventArgs e)
        {
            Thread step2 = new Thread(autoInterParaCali2);
            step2.IsBackground = true;
            step2.Start();
        }

        private void btnStopCaliing_Click(object sender, EventArgs e)
        {
            mutex.WaitOne();
            if (isCaliing)
            {
                isCaliing = false;
                textShowIsCaliingAddStr("正在终止标定...");
            }
            mutex.ReleaseMutex();
        }

        private void autoInterParaCali1()
        {
            btnAutoInterParaCali2Disable();

            //验证全局参数合法性
            if (lineOptViewDist.Text == "" || lineActualDist.Text == "")
            {
                LogAddStr(System.DateTime.Now + "：未输入最佳视距或角点实际宽度！\r\n");
                return;
            }
            else
            {
                if (lineOptViewDist.Value.Equals(0) || lineActualDist.Value.Equals(0))
                {
                    LogAddStr(System.DateTime.Now + "：最佳视距和角点实际宽度必须大于0！\r\n");
                    return;
                }
            }
            if (String.IsNullOrEmpty(textEndPos.Text) || String.IsNullOrEmpty(textStartPos.Text))
            {
                LogAddStr(System.DateTime.Now + "：未输入调高器起始点或终止点！\r\n");
                return;
            }

            //计算调高器步进距离
            double endPos = Convert.ToDouble(textEndPos.Text.ToString());
            double startPos = Convert.ToDouble(textStartPos.Text.ToString());
            double stepDist = (endPos - startPos) / 9;

            //建立socket分别与寻缝器和调高器通讯
            Socket sensorSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            Socket heightSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            //超时时间设置为2s
            sensorSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 2000);
            heightSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 5000);

            try
            {
                sensorSocket.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 5020));
            }
            catch (Exception ex)
            {
                LogAddStr(System.DateTime.Now + "：连接寻缝器失败！\r\n");
                textShowIsCaliingAddStr("标定结束");
                MessageBox.Show(ex.Message);
                return;
            }
            try
            {
                heightSocket.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 60001));
            }
            catch (Exception ex)
            {
                LogAddStr(System.DateTime.Now + "：连接调高器测试软件失败！\r\n");
                textShowIsCaliingAddStr("标定结束");
                MessageBox.Show(ex.Message);
                return;
            }

            mutex.WaitOne();
            if (isCaliing)
            {
                mutex.ReleaseMutex();
                MessageBox.Show("自动标定正在进行，请勿重复点击！");
                return;
            }
            isCaliing = true;
            textShowIsCaliingAddStr("正在自动标定中...");
            mutex.ReleaseMutex();
            LogAddStr(System.DateTime.Now + "：开始自动标定第一步\r\n");

            //发送10组请求
            int cnt = 10;
            int id = 110;
            bool isCaliDone = true;
            ModelHeightAdjust prevZ = new ModelHeightAdjust();
            prevZ.Zpos = -10000;
            while (isCaliing && cnt-- > 0)
            {
                double[] cornerPoint = new double[5];//存放标定数据的数组 0为调高器高度 1、2为左角点坐标，3、4为右角点坐标

                //控制调高器移动到cornerPoint[cnt]
                cornerPoint[0] = endPos - stepDist * (9 - cnt);
                ModelHeightAdjust move_resp = new ModelHeightAdjust();
                if (!moveToHeight(heightSocket, cornerPoint[0], ref move_resp))
                {
                    LogAddStr(System.DateTime.Now + "：第" + (10 - cnt) + "组数据调高器运动失败，标定终止！\r\n");
                    isCaliDone = false;
                    break;
                }
                if (move_resp.CMDID == HeightAdjustState.HeightFailedConnect)
                {
                    LogAddStr(System.DateTime.Now + "：连接调高器失败，标定终止！\r\n");
                    isCaliDone = false;
                    break;
                }

                //稍许等待让调高器运动
                Thread.Sleep(200);

                ModelHeightAdjust curZ = new ModelHeightAdjust();
                if (!getHeight(heightSocket, ref curZ))
                {
                    LogAddStr(System.DateTime.Now + "：第" + (10 - cnt) + "组数据获取调高器高度失败，标定终止！\r\n");
                    isCaliDone = false;
                    break;
                }
                if (curZ.CMDID == HeightAdjustState.HeightFailedConnect)
                {
                    LogAddStr(System.DateTime.Now + "：连接调高器失败，标定终止！\r\n");
                    isCaliDone = false;
                    break;
                }

                //判断调高器是否到达指定位置或一直到不了指定位置
                while (Math.Abs(curZ.Zpos - cornerPoint[0]) > 0.06)
                {
                    Thread.Sleep(200);
                    if (!getHeight(heightSocket, ref curZ))
                    {
                        LogAddStr(System.DateTime.Now + "：第" + (10 - cnt) + "组数据获取调高器高度失败，标定终止！\r\n");
                        isCaliDone = false;
                        break;
                    }
                    if (curZ.CMDID == HeightAdjustState.HeightFailedConnect)
                    {
                        LogAddStr(System.DateTime.Now + "：连接调高器失败，标定终止！\r\n");
                        isCaliDone = false;
                        break;
                    }
                    if (Math.Abs(curZ.Zpos - prevZ.Zpos) < 0.05)
                    {
                        LogAddStr(System.DateTime.Now + "：第" + (10 - cnt) + "组数据调高器无法运动到指定位置，标定终止！\r\n");
                        isCaliDone = false;
                        break;
                    }
                    prevZ.Zpos = curZ.Zpos;
                }
                if (!isCaliDone)
                {
                    break;
                }

                //调高器运动到位之后等待1s再取角点
                Thread.Sleep(1750);

                //获取寻缝器角点数据
                bool isGetPoint = false;
                ModelWeldTrackCMD resp = new ModelWeldTrackCMD();
                //获取失败自动重试5次
                for (int j = 0; isCaliing && j < 5; j++)
                {
                    if (!getCornerPoint(sensorSocket, ref id, ref resp))
                    {
                        LogAddStr(System.DateTime.Now + "：第" + (10 - cnt) + "组数据获取角点失败，标定终止！\r\n");
                        isCaliDone = false;
                        break;
                    }

                    if (resp.Result == "true")
                    {
                        isGetPoint = true;
                        break;
                    }
                    else
                    {
                        if (j == 4)
                        {
                            LogAddStr(System.DateTime.Now + "：第" + (10 - cnt)
                                + "组数据第" + (j + 1) + "次未捕获到角点数据！检查检测区域设置是否合理。"
                                + "检测区域设置完成后重新开始自动标定第一步！\r\n");
                            break;
                        }
                        else
                        {
                            LogAddStr(System.DateTime.Now + "：第" + (10 - cnt)
                            + "组数据第" + (j + 1) + "次未捕获到角点数据，正在重试...\r\n");
                            Thread.Sleep(1000);
                            continue;
                        }
                    }
                }

                if (!isGetPoint)
                {
                    isCaliDone = false;
                    break;
                }
                //保存该组数据
                cornerPoint[1] = (double)resp.X;
                cornerPoint[2] = (double)resp.Y;
                cornerPoints[cnt] = cornerPoint;

                LogAddStr(System.DateTime.Now + "：第" + (10 - cnt) + "组数据获取成功！\r\n");
                LogAddStr("调高器高度：" + cornerPoint[0]
                    + "\r\n角点1X坐标：" + cornerPoint[1] + "\r\n角点1Y坐标：" + cornerPoint[2]
                    + "\r\n角点2X坐标：" + cornerPoint[3] + "\r\n角点2Y坐标：" + cornerPoint[4] + "\r\n");
            }

            //sensorSocket.Close();
            heightSocket.Close();

            if (isCaliing && isCaliDone)
            {
                optViewDist = Convert.ToDouble(lineOptViewDist.Text);
                actualDist = Convert.ToDouble(lineActualDist.Text);
                LogAddStr(System.DateTime.Now + "：自动标定第一步完成，设置另一侧检测区域后进行自动标定第二步！\r\n");
                btnAutoInterParaCali2Enable();
            }

            mutex.WaitOne();
            isCaliing = false;
            textShowIsCaliingAddStr("标定结束");
            mutex.ReleaseMutex();
        }

        private void autoInterParaCali2()
        {
            //建立socket分别与寻缝器和调高器通讯
            Socket sensorSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            Socket heightSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            //超时时间设置为2s
            sensorSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 2000);
            heightSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 5000);

            try
            {
                sensorSocket.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 5020));
            }
            catch (Exception ex)
            {
                LogAddStr(System.DateTime.Now + "：连接寻缝器失败！\r\n");
                btnAutoInterParaCali1Enable();
                btnAutoInterParaCali2Disable();
                MessageBox.Show(ex.Message);
                return;
            }

            try
            {
                heightSocket.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 60001));
            }
            catch (Exception ex)
            {
                LogAddStr(System.DateTime.Now + "：连接调高器测试软件失败！\r\n");
                btnAutoInterParaCali1Enable();
                btnAutoInterParaCali2Disable();
                MessageBox.Show(ex.Message);
                return;
            }

            mutex.WaitOne();
            if (isCaliing)
            {
                mutex.ReleaseMutex();
                MessageBox.Show("自动标定正在进行，请勿重复点击！");
                return;
            }
            isCaliing = true;
            textShowIsCaliingAddStr("正在自动标定中...");
            mutex.ReleaseMutex();
            btnAutoInterParaCali1Disable();
            LogAddStr(System.DateTime.Now + "：开始自动标定第二步\r\n");

            int id = 210;
            bool isCaliDone = true;
            ModelHeightAdjust prevZ = new ModelHeightAdjust();
            prevZ.Zpos = -10000;
            for (int i = 0; isCaliing && i < cornerPoints.Length; i++)
            {
                //控制调高器移动到cornerPoints[i][0]
                ModelHeightAdjust move_resp = new ModelHeightAdjust();
                if (!moveToHeight(heightSocket, cornerPoints[i][0], ref move_resp))
                {
                    LogAddStr(System.DateTime.Now + "：第" + (10 - i) + "组数据获取调高器高度失败，标定终止！\r\n");
                    isCaliDone = false;
                    break;
                }
                if (move_resp.CMDID == HeightAdjustState.HeightFailedConnect)
                {
                    LogAddStr(System.DateTime.Now + "：连接调高器失败，标定终止！\r\n");
                    isCaliDone = false;
                    break;
                }

                //稍许等待让调高器运动
                Thread.Sleep(200);

                ModelHeightAdjust curZ = new ModelHeightAdjust();
                if (!getHeight(heightSocket, ref curZ))
                {
                    LogAddStr(System.DateTime.Now + "：第" + (10 - i) + "组数据获取调高器高度失败，标定终止！\r\n");
                    isCaliDone = false;
                    break;
                }
                if (curZ.CMDID == HeightAdjustState.HeightFailedConnect)
                {
                    LogAddStr(System.DateTime.Now + "：连接调高器失败，标定终止！\r\n");
                    isCaliDone = false;
                    break;
                }

                //判断调高器是否到达指定位置或一直到不了指定位置
                while (Math.Abs(curZ.Zpos - cornerPoints[i][0]) > 0.1)
                {
                    Thread.Sleep(200);
                    if (!getHeight(heightSocket, ref curZ))
                    {
                        LogAddStr(System.DateTime.Now + "：第" + (10 - i) + "组数据获取调高器高度失败，标定终止！\r\n");
                        isCaliDone = false;
                        break;
                    }
                    if (curZ.CMDID == HeightAdjustState.HeightFailedConnect)
                    {
                        LogAddStr(System.DateTime.Now + "：连接调高器失败，标定终止！\r\n");
                        isCaliDone = false;
                        break;
                    }
                    if (Math.Abs(curZ.Zpos - prevZ.Zpos) < 0.05)
                    {
                        LogAddStr(System.DateTime.Now + "：第" + (10 - i) + "组数据调高器无法运动到指定位置，标定终止！\r\n");
                        isCaliDone = false;
                        break;
                    }
                    prevZ.Zpos = curZ.Zpos;
                }
                if (!isCaliDone)
                {
                    break;
                }

                //调高器运动到位之后等待1s再取角点
                Thread.Sleep(1750);

                //获取寻缝器角点数据
                bool isGetPoint = false;
                ModelWeldTrackCMD resp = new ModelWeldTrackCMD();
                //获取失败自动重试5次
                for (int j = 0; isCaliing && j < 5; j++)
                {
                    if (!getCornerPoint(sensorSocket, ref id, ref resp))
                    {
                        LogAddStr(System.DateTime.Now + "：第" + (10 - i) + "组数据获取角点失败，标定终止！\r\n");
                        isCaliDone = false;
                        break;
                    }

                    if (resp.Result == "true")
                    {
                        isGetPoint = true;
                        break;
                    }
                    else
                    {
                        if (j == 4)
                        {
                            LogAddStr(System.DateTime.Now + "：第" + (10 - i)
                                + "组数据第" + (j + 1) + "次未捕获到角点数据！检查检测区域设置是否合理。"
                                + "检测区域设置完成后重新开始自动标定第一步！\r\n");
                            break;
                        }
                        else
                        {
                            LogAddStr(System.DateTime.Now + "：第" + (10 - i)
                            + "组数据第" + (j + 1) + "次未捕获到角点数据，正在重试...\r\n");
                            Thread.Sleep(1000);
                            continue;
                        }
                    }
                }

                if (!isGetPoint)
                {
                    isCaliDone = false;
                    break;
                }
                //保存该组数据
                cornerPoints[i][3] = (double)resp.X;
                cornerPoints[i][4] = (double)resp.Y;
                LogAddStr(System.DateTime.Now + "：第" + (10 - i) + "组数据获取成功！\r\n");
                LogAddStr("调高器高度：" + cornerPoints[i][0]
                    + "\r\n角点1X坐标：" + cornerPoints[i][1] + "\r\n角点1Y坐标：" + cornerPoints[i][2]
                    + "\r\n角点2X坐标：" + cornerPoints[i][3] + "\r\n角点2Y坐标：" + cornerPoints[i][4] + "\r\n");
            }

            //sensorSocket.Close();
            heightSocket.Close();
            btnAutoInterParaCali1Enable();
            btnAutoInterParaCali2Disable();

            if (isCaliing && isCaliDone)
            {
                LogAddStr(System.DateTime.Now + "：自动标定第二步完成\r\n");
            }

            mutex.WaitOne();
            isCaliing = false;
            textShowIsCaliingAddStr("标定结束");
            mutex.ReleaseMutex();
        }

        private bool moveToHeight(Socket heightSocket, double height, ref ModelHeightAdjust resp)
        {
            bool flag = false;
            //控制调高器移动到cornerPoint[cnt]，最多超时重试5次
            for (int k = 0; k < 5; k++)
            {
                try
                {
                    ModelHeightAdjust h = new ModelHeightAdjust(24, HeightAdjustState.HeightMove, 1014, height);
                    string height_input = JsonConvert.SerializeObject(h, jsonSetting);
                    byte[] height_send_buf = Encoding.UTF8.GetBytes(height_input + "#Height");
                    heightSocket.Send(height_send_buf);
                }
                catch (SocketException ex)
                {
                    if (ex.SocketErrorCode == SocketError.TimedOut)
                    {
                        continue;
                    }
                    else
                    {
                        MessageBox.Show(ex.Message);
                        break;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    break;
                }

                //接收调高器的数据
                try
                {
                    byte[] height_recv_buf = new byte[1024];
                    int len = heightSocket.Receive(height_recv_buf);

                    if (len > 0)
                    {
                        string msg = Encoding.UTF8.GetString(height_recv_buf);
                        string[] jsonStrings = msg.Split('#');
                        resp = JsonConvert.DeserializeObject<ModelHeightAdjust>(jsonStrings[0]);
                        flag = true;
                        break;
                    }
                }
                catch (SocketException ex)
                {
                    if (ex.SocketErrorCode == SocketError.TimedOut)
                    {
                        if (k == 4)
                        {
                            LogAddStr(System.DateTime.Now + "：第" + (k + 1) + "次获取调高器高度超时！检查调高器是否正常工作\r\n");
                            flag = false;
                            break;
                        }
                        else
                        {
                            LogAddStr(System.DateTime.Now + "：第" + (k + 1) + "次获取调高器高度超时，正在重试...\r\n");
                            Thread.Sleep(1000);
                            continue;
                        }
                    }
                    else
                    {
                        MessageBox.Show(ex.Message);
                        break;
                    }

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    break;
                }
            }

            return flag;
        }

        private bool getHeight(Socket heightSocket, ref ModelHeightAdjust resp)
        {
            bool flag = false;
            ModelHeightAdjust req = new ModelHeightAdjust(24, HeightAdjustState.HeightGet, 1014);
            //获取调高器高度，最多超时重试5次
            for (int k = 0; k < 5; k++)
            {
                //请求调高器数据
                try
                {
                    string height_input = JsonConvert.SerializeObject(req, jsonSetting);
                    LogAddStr(height_input + "#Height");
                    byte[] hright_send_buf = Encoding.UTF8.GetBytes(height_input + "#Height");
                    heightSocket.Send(hright_send_buf);
                }
                catch (SocketException ex)
                {
                    if (ex.SocketErrorCode == SocketError.TimedOut)
                    {
                        continue;
                    }
                    else
                    {
                        MessageBox.Show(ex.Message);
                        break;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    break;
                }

                //接收调高器数据
                try
                {
                    byte[] height_recv_buf = new byte[1024];
                    int len = heightSocket.Receive(height_recv_buf);

                    if (len > 0)
                    {
                        string msg = Encoding.UTF8.GetString(height_recv_buf);
                        LogAddStr(msg);
                        string[] jsonStrings = msg.Split('#');
                        resp = JsonConvert.DeserializeObject<ModelHeightAdjust>(jsonStrings[0]);
                        flag = true;
                        break;
                    }
                }
                catch (SocketException ex)
                {
                    if (ex.SocketErrorCode == SocketError.TimedOut)
                    {
                        if (k == 4)
                        {
                            LogAddStr(System.DateTime.Now + "：第" + (k + 1) + "次获取调高器高度超时！检查调高器是否正常工作\r\n");
                            flag = false;
                            break;
                        }
                        else
                        {
                            LogAddStr(System.DateTime.Now + "：第" + (k + 1) + "次获取调高器高度超时，正在重试...\r\n");
                            Thread.Sleep(1000);
                            continue;
                        }
                    }
                    else
                    {
                        MessageBox.Show(ex.Message);
                        break;
                    }

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    break;
                }
            }

            return flag;
        }

        private bool getCornerPoint(Socket sensorSocket, ref int id, ref ModelWeldTrackCMD resp)
        {
            bool flag = false;
            //获取寻缝器角点数据，最多超时重试5次
            for (int k = 0; k < 5; k++)
            {
                try
                {
                    ModelWeldTrackCMD m = new ModelWeldTrackCMD(11, id);
                    string sensor_input = JsonConvert.SerializeObject(m, jsonSetting) + "#Vision";
                    byte[] sensor_send_buf = Encoding.UTF8.GetBytes(sensor_input);
                    sensorSocket.Send(sensor_send_buf);
                    id++;
                }
                catch (SocketException ex)
                {
                    if (ex.SocketErrorCode == SocketError.TimedOut)
                    {
                        continue;
                    }
                    else
                    {
                        MessageBox.Show(ex.Message);
                        break;
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    break;
                }

                //接收寻缝器的数据
                try
                {
                    byte[] sensor_recv_buf = new byte[1024];
                    int len = sensorSocket.Receive(sensor_recv_buf);

                    if (len > 0)
                    {
                        string msg = Encoding.UTF8.GetString(sensor_recv_buf);
                        string[] jsonStrings = msg.Split('#');
                        resp = JsonConvert.DeserializeObject<ModelWeldTrackCMD>(jsonStrings[0]);
                        flag = true;
                        break;
                    }
                }
                catch (SocketException ex)
                {
                    if (ex.SocketErrorCode == SocketError.TimedOut)
                    {
                        if (k == 4)
                        {
                            LogAddStr(System.DateTime.Now + "：第" + (k + 1) + "次获取角点超时！检查寻缝器是否正常工作\r\n");
                            break;
                        }
                        else
                        {
                            LogAddStr(System.DateTime.Now + "：第" + (k + 1) + "次获取角点超时，正在重试...\r\n");
                            Thread.Sleep(1000);
                            continue;
                        }
                    }
                    else
                    {
                        MessageBox.Show(ex.Message);
                        break;
                    }

                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    break;
                }
            }

            return flag;
        }

        private void btnCalMat_Click(object sender, EventArgs e)
        {
            string sensor_send_str = "{\"Cmd\":12,\"Id\":123,\"DataCnt\":10,";
            sensor_send_str += "\"MidZ\":" + optViewDist;

            for (int i = 0; i < cornerPoints.Length; i++)
            {
                sensor_send_str += ",\"LX" + i + "\":" + cornerPoints[i][1].ToString("0.00");
                sensor_send_str += ",\"LY" + i + "\":" + cornerPoints[i][2].ToString("0.00");
                sensor_send_str += ",\"RX" + i + "\":" + cornerPoints[i][3].ToString("0.00");
                sensor_send_str += ",\"RY" + i + "\":" + cornerPoints[i][4].ToString("0.00");
                sensor_send_str += ",\"Height" + i + "\":" + cornerPoints[i][0].ToString("0.00");
                sensor_send_str += ",\"Width" + i + "\":" + actualDist;
            }
            sensor_send_str += "}";

            Socket sensorSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            sensorSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReceiveTimeout, 15000);

            try
            {
                sensorSocket.Connect(new IPEndPoint(IPAddress.Parse("127.0.0.1"), 5020));
            }
            catch (Exception ex)
            {
                LogAddStr(System.DateTime.Now + "：连接寻缝器失败！\r\n");
                MessageBox.Show(ex.Message);
                return;
            }

            try
            {
                byte[] sensor_send_buf = Encoding.UTF8.GetBytes(sensor_send_str + "#Vision");
                sensorSocket.Send(sensor_send_buf);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            try
            {
                byte[] sensor_recv_buf = new byte[1024];
                int len = sensorSocket.Receive(sensor_recv_buf);

                if (len > 0)
                {
                    string info;
                    string msg = Encoding.UTF8.GetString(sensor_recv_buf);
                    string[] jsonStrings = msg.Split('#');
                    JObject jObj = JObject.Parse(jsonStrings[0]);
                    if (jObj["Result"].ToString() == "True")
                    {
                        info = "内参矩阵计算成功！\r\n自动写入寻缝器成功！";

                        ModelDeviceViewDist para = new ModelDeviceViewDist();
                        para.MinZ = Convert.ToDouble(jObj["MinZ"].ToString());
                        para.MidZ = Convert.ToDouble(jObj["MidZ"].ToString());
                        para.MaxZ = Convert.ToDouble(jObj["MaxZ"].ToString());
                        para.MinView = Convert.ToDouble(jObj["MinView"].ToString());
                        para.MidView = Convert.ToDouble(jObj["MidView"].ToString());
                        para.MaxView = Convert.ToDouble(jObj["MaxView"].ToString());

                        //更新设备参数编辑界面
                        frm2.UpdateDevicePara(para);
                    }
                    else
                    {
                        info = "内参矩阵计算失败！";
                    }
                    MessageBox.Show(info);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            //sensorSocket.Close();
        }

        private void btnParaEdit_Click(object sender, EventArgs e)
        {
            frm2.ShowDialog();
        }

        private void btnClearLog_Click(object sender, EventArgs e)
        {
            Log.Clear();
        }

        //以下为控制控件行为的委托函数
        delegate void dgAddStr(string str);
        private void LogAddStr(string str)
        {
            if (Log.InvokeRequired)
            {
                dgAddStr dg = new dgAddStr(LogAddStr);
                Log.Invoke(dg, str);
            }
            else
            {
                Log.AppendText(str);
            }
        }

        private void OptViewDistAddStr(string str)
        {
            if (lineOptViewDist.InvokeRequired)
            {
                dgAddStr dg = new dgAddStr(OptViewDistAddStr);
                lineOptViewDist.Invoke(dg, str);
            }
            else
            {
                lineOptViewDist.Value = Convert.ToDecimal(str);
            }
        }

        private void startPosAddStr(string str)
        {
            if (textStartPos.InvokeRequired)
            {
                dgAddStr dg = new dgAddStr(startPosAddStr);
                textStartPos.Invoke(dg, str);
            }
            else
            {
                textStartPos.Clear();
                textStartPos.AppendText(str);
            }
        }

        private void endPosAddStr(string str)
        {
            if (textEndPos.InvokeRequired)
            {
                dgAddStr dg = new dgAddStr(endPosAddStr);
                textEndPos.Invoke(dg, str);
            }
            else
            {
                textEndPos.Clear();
                textEndPos.AppendText(str);
            }
        }

        private void textShowIsCaliingAddStr(string str)
        {
            if (textShowIsCaliing.InvokeRequired)
            {
                dgAddStr dg = new dgAddStr(textShowIsCaliingAddStr);
                textShowIsCaliing.Invoke(dg, str);
            }
            else
            {
                textShowIsCaliing.Clear();
                textShowIsCaliing.AppendText(str);
            }
        }

        delegate void dgIsEnable();

        private void btnReadStartPointEnable()
        {
            if (btnReadStartPoint.InvokeRequired)
            {
                dgIsEnable dg = new dgIsEnable(btnReadStartPointEnable);
                btnReadStartPoint.Invoke(dg);
            }
            else
            {
                btnReadStartPoint.Enabled = true;
            }
        }

        private void btnReadStartPointDisable()
        {
            if (btnReadStartPoint.InvokeRequired)
            {
                dgIsEnable dg = new dgIsEnable(btnReadStartPointDisable);
                btnReadStartPoint.Invoke(dg);
            }
            else
            {
                btnReadStartPoint.Enabled = false;
            }
        }

        private void btnReadEndPointEnable()
        {
            if (btnReadEndPoint.InvokeRequired)
            {
                dgIsEnable dg = new dgIsEnable(btnReadEndPointEnable);
                btnReadEndPoint.Invoke(dg);
            }
            else
            {
                btnReadEndPoint.Enabled = true;
            }
        }

        private void btnReadEndPointDisable()
        {
            if (btnReadEndPoint.InvokeRequired)
            {
                dgIsEnable dg = new dgIsEnable(btnReadEndPointDisable);
                btnReadEndPoint.Invoke(dg);
            }
            else
            {
                btnReadEndPoint.Enabled = false;
            }
        }

        private void btnAutoInterParaCali1Enable()
        {
            if (btnAutoInterParaCali1.InvokeRequired)
            {
                dgIsEnable dg = new dgIsEnable(btnAutoInterParaCali1Enable);
                btnAutoInterParaCali1.Invoke(dg);
            }
            else
            {
                btnAutoInterParaCali1.Enabled = true;
            }
        }

        private void btnAutoInterParaCali2Enable()
        {
            if (btnAutoInterParaCali2.InvokeRequired)
            {
                dgIsEnable dg = new dgIsEnable(btnAutoInterParaCali2Enable);
                btnAutoInterParaCali2.Invoke(dg);
            }
            else
            {
                btnAutoInterParaCali2.Enabled = true;
            }
        }

        private void btnAutoInterParaCali1Disable()
        {
            if (btnAutoInterParaCali1.InvokeRequired)
            {
                dgIsEnable dg = new dgIsEnable(btnAutoInterParaCali1Disable);
                btnAutoInterParaCali1.Invoke(dg);
            }
            else
            {
                btnAutoInterParaCali1.Enabled = false;
            }
        }

        private void btnAutoInterParaCali2Disable()
        {
            if (btnAutoInterParaCali2.InvokeRequired)
            {
                dgIsEnable dg = new dgIsEnable(btnAutoInterParaCali2Disable);
                btnAutoInterParaCali2.Invoke(dg);
            }
            else
            {
                btnAutoInterParaCali2.Enabled = false;
            }
        }

    }
}
